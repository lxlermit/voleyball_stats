// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const appState = {
    playersOnField: {},
    isFlipped: false,
    isOurServe: true,
    zoneMapping: {
        1: 4, 2: 5, 3: 6, 4: 1, 5: 2, 6: 3
    }
};

const matchState = {
    currentSet: 1,
    maxSets: 5,
    ourScore: 0,
    opponentScore: 0,
    sets: {}
};

let longPressTimer = null;
const LONG_PRESS_DURATION = 500; // 0.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initPlayerTags();
    initZoneFields();
    initModal();
    initScoreControls();
    updateServeUI();
    updateZone1Actions();
    initSettingsModal();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
function initPlayerTags() {
    document.querySelectorAll('#players-header .player-tag').forEach(player => {
        player.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('playerNumber', this.dataset.number);
            e.dataTransfer.setData('playerName',
                `#${this.dataset.number} ${this.dataset.lastName} ${this.dataset.firstName}`);
            e.dataTransfer.setData('playerColor', this.style.backgroundColor);
        });

        player.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.05)';
            this.style.boxShadow = '0 0 10px rgba(0,0,0,0.2)';
        });

        player.addEventListener('mouseleave', function() {
            this.style.transform = '';
            this.style.boxShadow = '';
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω –ø–æ–ª—è
function initZoneFields() {
    document.querySelectorAll('.player-field.empty').forEach(field => {
        setupFieldEvents(field);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—è
function setupFieldEvents(field) {
    field.addEventListener('dragover', function(e) {
        e.preventDefault();
        if (this.classList.contains('empty')) {
            this.style.backgroundColor = '#d0d0d0';
        }
    });

    field.addEventListener('dragleave', function() {
        if (this.classList.contains('empty')) {
            this.style.backgroundColor = '#e0e0e0';
        }
    });

    field.addEventListener('drop', function(e) {
        e.preventDefault();
        const zone = this.closest('[data-zone]').dataset.zone;
        const playerNumber = e.dataTransfer.getData('playerNumber');
        const playerName = e.dataTransfer.getData('playerName');
        const playerColor = e.dataTransfer.getData('playerColor');

        if (this.classList.contains('filled')) {
            const currentPlayerNumber = this.textContent.match(/#(\d+)/)[1];
            returnPlayerToBench(currentPlayerNumber);
        }

        placePlayerOnField(this, playerNumber, playerName, playerColor, zone);
    });
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ
function placePlayerOnField(field, number, name, color, zone) {
    field.textContent = name;
    field.style.backgroundColor = color;
    field.classList.replace('empty', 'filled');

    document.querySelector(`#players-header .player-tag[data-number="${number}"]`)
        .style.display = 'none';

    appState.playersOnField[number] = zone;
    field.onclick = () => openRemoveModal(number, field);

    if (zone === '1' || zone === '4') {
        updateZone1Actions();
    }
}

// –í–æ–∑–≤—Ä–∞—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–∫–∞–º–µ–π–∫—É
function returnPlayerToBench(playerNumber) {
    const playerElement = document.querySelector(
        `#players-header .player-tag[data-number="${playerNumber}"]`
    );
    if (playerElement) {
        playerElement.style.display = 'inline-block';
    }
    delete appState.playersOnField[playerNumber];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ–¥–∞—á–∏
function updateServeUI() {
    const serveButton = document.getElementById('serve-toggle-btn');
    if (serveButton) {
        serveButton.textContent = appState.isOurServe ? 'üéæ –ú—ã –ø–æ–¥–∞–µ–º' : 'üéæ –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–¥–∞–µ—Ç';
        serveButton.style.backgroundColor = appState.isOurServe ? '#4CAF50' : '#F44336';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–æ–Ω–µ 1
function updateZone1Actions() {
    const zone1 = document.getElementById('zone-1');
    if (!zone1) return;

    const currentZone = zone1.closest('[data-zone]');
    const oldServingRow = currentZone.querySelector('.serving-row');
    if (oldServingRow) {
        oldServingRow.remove();
    }

    if (appState.isOurServe) {
        const servingRow = document.createElement('div');
        servingRow.className = 'serving-row';
        servingRow.innerHTML = `
            <div class="serving-field ace-serve">Ace</div>
            <div class="serving-field normal-serve">–ü–æ–¥–∞—á–∞</div>
            <div class="serving-field error-serve">–ü–æ–¥–∞—á–∞ -</div>
        `;

        const playerField = currentZone.querySelector('.player-field');
        if (playerField) {
            currentZone.insertBefore(servingRow, playerField);
        }

        servingRow.querySelectorAll('.serving-field').forEach(button => {
            button.addEventListener('click', function() {
                const playerNumber = currentZone.querySelector('.player-field.filled')?.textContent.match(/#(\d+)/)?.[1];
                if (playerNumber) {
                    const actionType = this.classList.contains('ace-serve') ? 'serve_ace' :
                                     this.classList.contains('error-serve') ? 'serve_error' : 'serve_normal';
                    recordPlayerAction(playerNumber, actionType, currentZone.dataset.zone);
                }
            });
        });
    }
}

// –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –ø–æ–ª—è
function flipCourt() {
    const courtArea = document.getElementById('court-area');
    if (!courtArea) return;

    appState.isFlipped = !appState.isFlipped;
    courtArea.classList.toggle('flipped', appState.isFlipped);

    const zonesState = {};
    document.querySelectorAll('.net-zone, .back-zone').forEach(zone => {
        const currentZone = zone.dataset.zone;
        zonesState[currentZone] = {
            playerHtml: zone.querySelector('.player-field').outerHTML,
            actionRowsHtml: Array.from(zone.querySelectorAll('.action-row, .receive-row, .serving-row'))
                              .filter(row => row.innerHTML.trim() !== '')
                              .map(row => row.outerHTML),
            number: zone.querySelector('.player-field.filled')?.textContent.match(/#(\d+)/)?.[1]
        };
    });

    document.querySelectorAll('.net-zone, .back-zone').forEach(zone => {
        const currentZone = zone.dataset.zone;
        const targetZone = appState.zoneMapping[currentZone];

        zone.innerHTML = `
            ${zonesState[targetZone]?.actionRowsHtml.join('') || ''}
            ${zonesState[targetZone]?.playerHtml || `<div class="player-field empty" id="player-${targetZone}" data-zone="${targetZone}">–ó–æ–Ω–∞ ${targetZone}</div>`}
        `;

        const playerField = zone.querySelector('.player-field');
        if (playerField.classList.contains('filled')) {
            const playerNumber = zonesState[targetZone]?.number;
            if (playerNumber) {
                playerField.onclick = () =>
                    openRemoveModal(playerNumber, playerField);
            }
        } else {
            setupFieldEvents(playerField);
        }

        zone.dataset.zone = targetZone;
        zone.id = `zone-${targetZone}`;
        setupActionButtons(zone);
    });

    updateZone1Actions();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
function setupActionButtons(zone) {
    zone.querySelectorAll('.action-field').forEach(button => {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞—Ä +"
        if (button.classList.contains('attack-plus')) {
            button.addEventListener('mousedown', startLongPress);
            button.addEventListener('mouseup', endLongPress);
            button.addEventListener('mouseleave', cancelLongPress);
            button.addEventListener('click', handleAttackPlusClick);
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
            button.addEventListener('click', function() {
                const zoneNumber = zone.dataset.zone;
                const actionType = this.textContent.trim();
                const playerNumber = zone.querySelector('.player-field.filled')?.textContent.match(/#(\d+)/)?.[1];
                if (playerNumber) {
                    recordPlayerAction(playerNumber, actionType, zoneNumber);
                }
            });
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω
function setupActionButtonsForAllZones() {
    document.querySelectorAll('.net-zone, .back-zone').forEach(zone => {
        setupActionButtons(zone);
    });
}

// –ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
function recordPlayerAction(playerNumber, actionType, zone) {
    console.log(`–ò–≥—Ä–æ–∫ #${playerNumber} –≤ –∑–æ–Ω–µ ${zone}: ${actionType}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä

    // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:
    const actionData = {
        player: playerNumber,
        action: actionType,
        zone: zone,
        timestamp: new Date().toISOString()
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('/record_action', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(actionData)
    })
    .then(response => {
        if (!response.ok) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function initModal() {
    const removeModalClose = document.querySelector('#remove-player-modal .close, #cancel-remove');
    if (removeModalClose) {
        removeModalClose.onclick = () => {
            document.getElementById('remove-player-modal').style.display = 'none';
        };
    }

    window.addEventListener('click', function(event) {
        if (event.target === document.getElementById('remove-player-modal')) {
            event.target.style.display = 'none';
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
function openRemoveModal(playerNumber, fieldElement) {
    const modal = document.getElementById('remove-player-modal');
    if (!modal) return;

    const playerInfo = document.getElementById('player-to-remove-info');
    if (playerInfo) {
        playerInfo.textContent = `–ò–≥—Ä–æ–∫ #${playerNumber} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–∞–º–µ–π–∫—É.`;
    }

    const confirmButton = document.getElementById('confirm-remove');
    if (confirmButton) {
        confirmButton.onclick = () => {
            returnPlayerToBench(playerNumber);
            resetField(fieldElement);
            modal.style.display = 'none';
        };
    }

    modal.style.display = 'block';
}

// –°–±—Ä–æ—Å –ø–æ–ª—è
function resetField(field) {
    const zone = field.closest('[data-zone]').dataset.zone;
    field.textContent = `–ó–æ–Ω–∞ ${zone}`;
    field.style.backgroundColor = '#e0e0e0';
    field.classList.replace('filled', 'empty');

    const newField = field.cloneNode(true);
    field.replaceWith(newField);
    setupFieldEvents(newField);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–º
function initScoreControls() {
    document.getElementById('our-point-btn')?.addEventListener('click', () => {
        matchState.ourScore++;
        updateScoreDisplay();
    });

    document.getElementById('opponent-point-btn')?.addEventListener('click', () => {
        matchState.opponentScore++;
        updateScoreDisplay();
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞
function updateScoreDisplay() {
    document.querySelector('.our-score').textContent = matchState.ourScore;
    document.querySelector('.opponent-score').textContent = matchState.opponentScore;
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ initSettingsModal –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏:
function initSettingsModal() {
    const modal = document.getElementById('settings-modal');
    if (!modal) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const settingsButton = document.getElementById('settings-btn');
    if (settingsButton) {
        settingsButton.addEventListener('click', function(e) {
            e.stopPropagation();
            modal.style.display = 'block';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
    const closeButton = modal.querySelector('.close');
    if (closeButton) {
        closeButton.addEventListener('click', function(e) {
            e.stopPropagation();
            modal.style.display = 'none';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
    window.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const setupModalButton = function(id, callback) {
        const btn = document.getElementById(id);
        if (btn) {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                callback();
                modal.style.display = 'none';
            });
        }
    };

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    setupModalButton('mirror-btn', flipCourt);

    setupModalButton('serve-toggle-btn', function() {
        appState.isOurServe = !appState.isOurServe;
        updateServeUI();
        updateZone1Actions();
    });

    setupModalButton('clear-to-serve', function() {
        console.log('–û—á–∏—Å—Ç–∫–∞ –¥–æ –ø–æ–¥–∞—á–∏');
        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    });

    setupModalButton('undo-last-action', function() {
        console.log('–û—Ç–º–µ–Ω–∞ –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–∞—á–∏');
        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    });

    setupModalButton('save-match', function() {
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—á–∞');
        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    });

    setupModalButton('end-set-from-settings', function() {
        // –í—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏
        if (matchState.currentSet > matchState.maxSets) return;

        const setResult = {
            our: matchState.ourScore,
            opponent: matchState.opponentScore
        };

        fetch('/save_set', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                set_number: matchState.currentSet,
                result: setResult
            })
        })
        .then(response => {
            if (response.ok) {
                const setElement = document.getElementById(`set-${matchState.currentSet}`);
                if (setElement) {
                    setElement.textContent = `${matchState.currentSet} –ø–∞—Ä—Ç–∏—è: ${matchState.ourScore}:${matchState.opponentScore}`;
                }

                matchState.ourScore = 0;
                matchState.opponentScore = 0;
                matchState.currentSet++;
                updateScoreDisplay();
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:', error);
        });
    });

    setupModalButton('end-game-from-settings', function() {
        // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        const setResult = {
            our: matchState.ourScore,
            opponent: matchState.opponentScore
        };

        fetch('/save_set', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                set_number: matchState.currentSet,
                result: setResult,
                end_match: true
            })
        })
        .then(() => {
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π URL
            window.location.href = "/";
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞:', error);
        });
    });

    setupModalButton('clear-players', clearAllPlayers);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–ª—è
function clearAllPlayers() {
    document.querySelectorAll('.player-field.filled').forEach(field => {
        const playerNumber = field.textContent.match(/#(\d+)/)?.[1];
        if (playerNumber) {
            returnPlayerToBench(playerNumber);
            resetField(field);
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
function startLongPress(e) {
    longPressTimer = setTimeout(() => {
        showAttackOptionsModal(e.target);
    }, LONG_PRESS_DURATION);
}

function endLongPress() {
    if (longPressTimer) {
        clearTimeout(longPressTimer);
        longPressTimer = null;
    }
}

function cancelLongPress() {
    if (longPressTimer) {
        clearTimeout(longPressTimer);
        longPressTimer = null;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
function handleAttackPlusClick(e) {
    if (longPressTimer) {
        clearTimeout(longPressTimer);
        longPressTimer = null;

        const zone = e.target.closest('[data-zone]');
        const playerNumber = zone.querySelector('.player-field.filled')?.textContent.match(/#(\d+)/)?.[1];
        if (playerNumber) {
            recordPlayerAction(playerNumber, '–£–¥–∞—Ä +', zone.dataset.zone);
        }
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∞—Ç–∞–∫
function showAttackOptionsModal(button) {
    const modal = document.getElementById('attack-modal');
    if (!modal) return;

    const zone = button.closest('[data-zone]');
    const playerField = zone.querySelector('.player-field.filled');
    if (!playerField) return;

    const playerNumber = playerField.textContent.match(/#(\d+)/)?.[1];
    if (!playerNumber) return;

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
    const rect = button.getBoundingClientRect();
    const modalContent = modal.querySelector('.attack-modal-content');
    modalContent.style.position = 'fixed';
    modalContent.style.left = `${rect.left}px`;
    modalContent.style.top = `${rect.bottom + 5}px`;

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeButton = modal.querySelector('.close');
    closeButton.onclick = function() {
        modal.style.display = 'none';
    };

    window.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞—Ç–∞–∫
    document.getElementById('attack-cross').onclick = function() {
        recordPlayerAction(playerNumber, '–£–¥–∞—Ä + –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏', zone.dataset.zone);
        modal.style.display = 'none';
    };

    document.getElementById('attack-line').onclick = function() {
        recordPlayerAction(playerNumber, '–£–¥–∞—Ä + –ø–æ –ª–∏–Ω–∏–∏', zone.dataset.zone);
        modal.style.display = 'none';
    };

    document.getElementById('attack-tip').onclick = function() {
        recordPlayerAction(playerNumber, '–£–¥–∞—Ä + —Å–∫–∏–¥–∫–∞', zone.dataset.zone);
        modal.style.display = 'none';
    };

    document.getElementById('attack-block-out').onclick = function() {
        recordPlayerAction(playerNumber, '–£–¥–∞—Ä + –≤ –∞—É—Ç —Å –±–ª–æ–∫–∞', zone.dataset.zone);
        modal.style.display = 'none';
    };

    modal.style.display = 'block';
    longPressTimer = null;
}